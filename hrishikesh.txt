set search_path to hrdb,public;
show search_path;

select * from employees;
select * from departments;

--  Inner Join
select first_name,last_name,department_name from employees join departments on employees.department_id = departments.department_id;

-- Display employees, first name,last name, department name
select first_name,last_name,department_name from employees join departments on employees.department_id = departments.department_id;

-- Display employees, first name,last name, department name where first_name is susan
select * from employees join departments on employees.department_id = departments.department_id where employees.first_name ilike 'Susan';

select * from employees;

-- three table join

select employees.first_name, employees.last_name, employees.department_id, locations.city 
	from employees 
	join departments on employees.department_id = departments.department_id 
	join locations on departments.location_id = locations.location_id;

select * from locations;
select * from departments;
select * from regions;
select * from employees;

-- Display the first_name and the last_name 
select concat(employees.first_name,'.',employees.last_name) as full_name,locations.country_id,regions.region_name
	from employees 
	join departments on employees.department_id = departments.department_id 
	join locations on departments.location_id = locations.location_id ;


-- Display the first_name,last_name,department_name of employees people who are from purchasing department
select * from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name ilike 'Purchasing';

-- Display total count from employees from purchasing department
select count(*) from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name ilike 'Purchasing';

-- Display the first_name and department_name of employees fromt the departments Administration, sales and department
select employees.first_name,departments.department_name from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name in ('Sales','Marketing','Administration');

select * from employees;

-- Display the employee name, address, country and region
select concat(e.first_name, '.', e.last_name) as "Full_Name", 
	concat(l.street_address, '. ', l.postal_code, l.city, ', ', l.state_province, ', ', l.postal_code) as "Address",
	c.country_name, r.region_name
	FROM employees e
	JOIN departments d on e.department_id = d.department_id
	JOIN locations l on d.location_id  = l.location_id
	JOIN countries c on l.country_id = c.country_id
	JOIN regions r on c.region_id  = r.region_id

set search_path to hrdb,public;
show search_path;

select * from employees;
select * from departments;

--  Inner Join
select first_name,last_name,department_name from employees join departments on employees.department_id = departments.department_id;

-- Display employees, first name,last name, department name
select first_name,last_name,department_name from employees join departments on employees.department_id = departments.department_id;

-- Display employees, first name,last name, department name where first_name is susan
select * from employees join departments on employees.department_id = departments.department_id where employees.first_name ilike 'Susan';

select * from employees;

-- three table join

select employees.first_name, employees.last_name, employees.department_id, locations.city 
	from employees 
	join departments on employees.department_id = departments.department_id 
	join locations on departments.location_id = locations.location_id;

select * from locations;
select * from departments;
select * from regions;
select * from employees;

-- Display the first_name and the last_name 
select concat(employees.first_name,'.',employees.last_name) as full_name,locations.country_id,regions.region_name
	from employees 
	join departments on employees.department_id = departments.department_id 
	join locations on departments.location_id = locations.location_id ;


-- Display the first_name,last_name,department_name of employees people who are from purchasing department
select * from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name ilike 'Purchasing';

-- Display total count from employees from purchasing department
select count(*) from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name ilike 'Purchasing';

-- Display the first_name and department_name of employees fromt the departments Administration, sales and department
select employees.first_name,departments.department_name from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name in ('Sales','Marketing','Administration');

select * from employees;

-- Display the employee name, address, country and region
select concat(e.first_name, '.', e.last_name) as "Full_Name", 
	concat(l.street_address, '. ', l.postal_code, l.city, ', ', l.state_province, ', ', l.postal_code) as "Address",
	c.country_name, r.region_name
	FROM employees e
	JOIN departments d on e.department_id = d.department_id
	JOIN locations l on d.location_id  = l.location_id
	JOIN countries c on l.country_id = c.country_id
	JOIN regions r on c.region_id  = r.region_id

-- avg salary of each department
select round(avg(employees.salary),2) from employees join departments 
	on employees.department_id = departments.department_id 
	group by departments.department_name;

set search_path to hrdb,public;
show search_path;

select * from employees;
select * from departments;

--  Inner Join
select first_name,last_name,department_name from employees join departments on employees.department_id = departments.department_id;

-- Display employees, first name,last name, department name
select first_name,last_name,department_name from employees join departments on employees.department_id = departments.department_id;

-- Display employees, first name,last name, department name where first_name is susan
select * from employees join departments on employees.department_id = departments.department_id where employees.first_name ilike 'Susan';

select * from employees;

-- three table join

select employees.first_name, employees.last_name, employees.department_id, locations.city 
	from employees 
	join departments on employees.department_id = departments.department_id 
	join locations on departments.location_id = locations.location_id;

select * from locations;
select * from departments;
select * from regions;
select * from employees;

-- Display the first_name and the last_name 
select concat(employees.first_name,'.',employees.last_name) as full_name,locations.country_id,regions.region_name
	from employees 
	join departments on employees.department_id = departments.department_id 
	join locations on departments.location_id = locations.location_id ;


-- Display the first_name,last_name,department_name of employees people who are from purchasing department
select * from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name ilike 'Purchasing';

-- Display total count from employees from purchasing department
select count(*) from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name ilike 'Purchasing';

-- Display the first_name and department_name of employees fromt the departments Administration, sales and department
select employees.first_name,departments.department_name from employees join departments 
	on employees.department_id = departments.department_id 
	where departments.department_name in ('Sales','Marketing','Administration');

select * from employees;

-- Display the employee name, address, country and region
select concat(e.first_name, '.', e.last_name) as "Full_Name", 
	concat(l.street_address, '. ', l.postal_code, l.city, ', ', l.state_province, ', ', l.postal_code) as "Address",
	c.country_name, r.region_name
	FROM employees e
	JOIN departments d on e.department_id = d.department_id
	JOIN locations l on d.location_id  = l.location_id
	JOIN countries c on l.country_id = c.country_id
	JOIN regions r on c.region_id  = r.region_id

-- avg salary of each department
select round(avg(employees.salary),2) from employees join departments 
	on employees.department_id = departments.department_id 
	group by departments.department_name;


-- display the number of employees in each department along with department_id descending order
select count(employee_id), department_id from employees group by department_id order by avg(salary) DESC;
select department_id,ceil(avg(salary)) from employees group by department_id order by avg(salary);
select round(avg(employees.salary),2) from employees join departments 
	on employees.department_id = departments.department_id 
	group by departments.department_name;

select department_id,ceil(avg(salary)) from employees group by department_id order by avg(salary);

-- avg salary of each department order by average salary
select department_id,ceil(avg(salary)) from employees group by department_id order by avg(salary);

-- display the department id which has highest number of employees
select * from employees;
select * from departments;

select department_id,sum(salary) from employees group by department_id order by sum(salary) desc limit 1;

-- display the department name which has the highest number of employees
select departments.department_name,count(employees.department_id) from employees join departments on employees.department_id = departments.department_id group by departments.department_name order by count(employees.department_id) desc limit 1;

-- display the number of employees who has the highest pay along with department name
select departments.department_name,employees.first_name, employees.salary from employees join departments on employees.department_id = departments.department_id order by employees.salary desc limit 1;

-- display the number of employees who has the highest pay 
select first_name,salary from employees order by salary desc limit 1;

-- find the department name where the average salary is less than the total average salary of all department
select departments.department_name, round(avg(employees.salary),4) from departments 
	join employees on 
	departments.department_id = employees.department_id 
	group by departments.department_name having avg(employees.salary) < (select avg(salary) from employees) order by round(avg(employees.salary),4);


-- find the department name where the average salary is less than the total average salary of all department
-- WRONG
select e.first_name, e.department_id from employees e join departments d on e.department_id = d.department_id
where  e.salary in (select max(salary) from employees group by department_id)


-- find the names of employees with their job titles
select employees.first_name,jobs.job_title from employees join jobs on employees.job_id = jobs.job_id;

-- find all employees who have dependents and display their names along with their number of depedents
select * from dependents;
select * from employees;

select employees.first_name,count(employees.first_name) from employees join dependents on employees.employee_id = dependents.employee_id
group by employees.first_name;

Update dependents set employee_id = 100 where dependent_id = 2;
Update dependents set employee_id = 100 where dependent_id = 3;
Update dependents set employee_id = 200 where dependent_id = 4;

select employees.first_name,count(employees.first_name) from employees right join dependents on employees.employee_id = dependents.employee_id
group by employees.first_name;


create view v_person as select * from person;
select * from v_person;


insert into v_person values (6,'Rita',32);

update v_person set age = 35 where pname = 'Rita';

delete from v_person where pname = 'Rita';

create table roles (role_id int primary key, name varchar(20)),
pid int references person(pid)


FUNCTIONS -------------------

-- CREATE FUNCTION function_name(pl type, p2 type,p3 type, ... .., pn type)
-- RETURNS type AS
-- BEGIN
-- -- function logic
-- END;
-- LANGUAGE language name

-- A transaction should start with "BEGIN" and should stop with "END"

CREATE OR REPLACE FUNCTION my_sum(x integer, y integer) RETURNS integer AS 
$$
SELECT x + y;
$$ LANGUAGE SQL;

-- To execute a function call select followed by function name and pass parameters 
select my_sum(2, 3) as "SUM";

set search_path to HRDB, public;

select * from person;

CREATE OR REPLACE FUNCTION delete_posts(p_title text) returns setof integer as $$
delete from library posts where title=p_title returning pk;
$$
LANGUAGE SQL;

select pk, title from posts order by pk;
insert into (pk, title) values (5, 'CSharp Programming');

select * from project;
--write a function that accepts project id and percentage to increment the budget for a given project id by x%

CREATE OR REPLACE FUNCTION accepts_project(
    project_name text,
    budget integer,
    increment_percentage decimal
) RETURNS TABLE (
    new_budget decimal,
    project_name text
) AS $$
SELECT budget * (1 + (increment_percentage / 100)), project_name
FROM project
WHERE project_name = $1
$$ LANGUAGE SQL;


SELECT * FROM accepts_project('Apollo', 1000, 10);


select * from library.posts order by pk;

create table dup_posts as select pk,title from post;

insert into dup_posts (pk,title) values (5,'CSharp Programmming');
select * from dup_posts;

create or replace function delete_posts_table (p_title text)
returns table (ret_key integer,ret_title text) as
	$$
delete from dup_posts where title=p_title text) as 
$$
language sql;
